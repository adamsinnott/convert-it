{"version":3,"sources":["components/entryText.jsx","components/primarySelection.jsx","components/secondarySelection.jsx","components/swapButton.jsx","components/submitButton.jsx","components/outputText.jsx","containers/HexToDecApp.jsx","App.js","serviceWorker.js","index.js"],"names":["EntryText","props","react_default","a","createElement","id","onFocus","onInputFocus","onBlur","onInputBlur","value","entryText","ref","entryTextRef","onChange","event","onEntryTextChange","target","PrimarySelection","className","onSelectionChange","primarySelection","selectionCriteria","map","singleSelection","key","SecondarySelection","secondarySelection","SwapButton","onClick","onSwapButton","SubmitButton","onSubmit","OutputText","outputText","HexToDecApp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onKeyboardCommand","bind","assertThisInitialized","convert","convertToHex","convertToDec","convertToBin","swapState","focusInputText","React","createRef","state","v","rgx","RegExp","match","setState","index","changeStateTo","indexOf","length","current","focus","primaryHolder","secondaryHolder","propToChange","document","addEventListener","removeEventListener","convertedValue","parseInt","toString","swapButton","submitButton","Component","App","containers_HexToDecApp","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a28a862d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst EntryText = (props) => {\r\n    return (\r\n        <span>\r\n            <input id=\"entry\" onFocus={props.onInputFocus} onBlur={props.onInputBlur} value={props.entryText} ref={props.entryTextRef} onChange={(event) => props.onEntryTextChange(event.target.value)}></input>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default EntryText;","import React from \"react\";\r\n\r\nconst PrimarySelection = (props) => {\r\n    return (\r\n        <span>\r\n            <select\r\n                className=\"input-select\" \r\n                onChange={(event)=>props.onSelectionChange(\"primarySelection\", event.target.value)}\r\n                value={props.primarySelection}\r\n                >\r\n                {props.selectionCriteria.map((singleSelection, key) => (\r\n                    <option key={key} value={singleSelection}>{singleSelection}</option>\r\n                ))}\r\n            </select>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default PrimarySelection;","import React from \"react\";\r\n\r\nconst SecondarySelection = (props) => {\r\n    return (\r\n        <span>\r\n            <select\r\n                className=\"input-select\"\r\n                onChange={(event)=>props.onSelectionChange(\"secondarySelection\", event.target.value)}\r\n                value={props.secondarySelection}\r\n                >\r\n                {props.selectionCriteria.map((singleSelection, key) => (\r\n                    <option key={key} value={singleSelection}>{singleSelection}</option>\r\n                ))}\r\n            </select>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default SecondarySelection;","import React from \"react\";\r\n\r\nconst SwapButton = (props) => {\r\n    return (\r\n        <button className=\"input-buttons swap-button\" onClick={props.onSwapButton}>&#60;&#62;</button>\r\n    )\r\n}\r\n\r\nexport default SwapButton;","import React from \"react\";\r\n\r\nconst SubmitButton = (props) => {\r\n    return (\r\n        <button className=\"input-buttons submit-button\" onClick={props.onSubmit}>Submit</button>\r\n    )\r\n}\r\n\r\nexport default SubmitButton;","import React from \"react\";\r\n\r\nconst OutputText = (props) => {\r\n    return (\r\n        <div id=\"output-text-container\">\r\n            <label id=\"output-text\">{props.outputText}</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OutputText;","import React from \"react\";\r\n// import the components and containers used in the main app\r\nimport EntryText from \"../components/entryText\";\r\nimport PrimarySelection from \"../components/primarySelection\";\r\nimport SecondarySelection from \"../components/secondarySelection\";\r\nimport SwapButton from \"../components/swapButton\";\r\nimport SubmitButton from \"../components/submitButton\";\r\nimport OutputText from \"../components/outputText\";\r\n\r\nclass HexToDecApp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // bind all the functions to this\r\n        this.onKeyboardCommand=this.onKeyboardCommand.bind(this);\r\n        this.onSelectionChange=this.onSelectionChange.bind(this);\r\n        this.onEntryTextChange=this.onEntryTextChange.bind(this);\r\n        this.onSubmit=this.onSubmit.bind(this);\r\n        this.convert=this.convert.bind(this);\r\n        this.convertToHex=this.convertToHex.bind(this);\r\n        this.convertToDec=this.convertToDec.bind(this);\r\n        this.convertToBin=this.convertToBin.bind(this);\r\n        this.onSwapButton=this.onSwapButton.bind(this);\r\n        this.swapState=this.swapState.bind(this);\r\n        this.focusInputText=this.focusInputText.bind(this);\r\n\r\n        // create a ref for the entryText\r\n        this.entryTextRef = React.createRef();\r\n\r\n        // create the starting state\r\n        this.state = {\r\n            primarySelection: \"bin\",\r\n            secondarySelection: \"dec\",\r\n            outputText: \"0\",\r\n            entryText: \"0\",\r\n            selectionCriteria: [\"hex\",\"dec\",\"bin\"]\r\n        };\r\n    };\r\n\r\n    onEntryTextChange (v) {\r\n        // create your regex pattern\r\n        let rgxStr = '^[0-9a-f]{0,10}$'\r\n        // initiate the regex object\r\n        let rgx = new RegExp(rgxStr);\r\n        // check if it matches \r\n        if (v.match(rgx)) {\r\n            // set the state\r\n            this.setState({entryText:v})\r\n        }\r\n    };\r\n\r\n    onKeyboardCommand (event) {\r\n        // create the index\r\n        let index = 0;\r\n        let changeStateTo = \"\";\r\n        // if the key pressed is the one you want\r\n        if ((event.key === 'k') || (event.key === 'K')) {\r\n            // get the position in selectionCriteria array of the current selection\r\n            index = this.state.selectionCriteria.indexOf(this.state.primarySelection)\r\n            // increase the index\r\n            index++\r\n            // but reset the index if the end is reached\r\n            if (index > (this.state.selectionCriteria.length-1)) {\r\n                index = 0;\r\n            }\r\n            // get the new state from the array using the index\r\n            changeStateTo=this.state.selectionCriteria[index]\r\n            // now set the state\r\n            this.setState({primarySelection:changeStateTo})\r\n        }\r\n        if ((event.key === 'l') || (event.key === 'L')) {\r\n            // get the position in selectionCriteria array of the current selection\r\n            index = this.state.selectionCriteria.indexOf(this.state.secondarySelection)\r\n            // increase the index\r\n            index++\r\n            // but reset the index if the end is reached\r\n            if (index > (this.state.selectionCriteria.length-1)) {\r\n                index = 0;\r\n            }\r\n            // get the new state from the array using the index\r\n            changeStateTo=this.state.selectionCriteria[index]\r\n            // now set the state\r\n            this.setState({secondarySelection:changeStateTo})\r\n        }\r\n        if ((event.key === 'x') || (event.key === 'X')) {\r\n            this.swapState()\r\n        }\r\n        if ((event.key === 'i') || (event.key === 'I')) {\r\n            this.focusInputText();\r\n        }\r\n        if ((event.key === 'r') || (event.key === 'R')) {\r\n            this.setState({entryText: \"\"});\r\n        }\r\n        if (event.key === 'Enter') {\r\n            this.onSubmit();\r\n            this.focusInputText();\r\n        }\r\n    }\r\n\r\n    focusInputText () {\r\n        this.entryTextRef.current.focus()\r\n    }\r\n\r\n    swapState () {\r\n        // swap the state of primary and secondary selections\r\n        let primaryHolder = this.state.primarySelection;\r\n        let secondaryHolder = this.state.secondarySelection;\r\n        this.setState({primarySelection:secondaryHolder})\r\n        this.setState({secondarySelection:primaryHolder})\r\n    }\r\n    onSelectionChange (propToChange, v) {\r\n        // handle the change of both primary and secondary selections\r\n        // check what selection and change the state to that passed in\r\n        if (propToChange === \"primarySelection\")\r\n            this.setState({primarySelection:v})   \r\n        else if (propToChange === \"secondarySelection\")\r\n            this.setState({secondarySelection:v})\r\n        this.focusInputText();\r\n    }\r\n\r\n    // use a lifecycle method to add the event listener\r\n    // only on mounting the component to prevent memory leaks\r\n    componentDidMount(){\r\n      document.addEventListener(\"keydown\", this.onKeyboardCommand, false);\r\n      this.focusInputText();\r\n    }\r\n    // when the component unmounts remove the event listener\r\n    componentWillUnmount(){\r\n      document.removeEventListener(\"keydown\", this.onKeyboardCommand, false);\r\n    }\r\n\r\n    convert (value, primarySelection, secondarySelection) {\r\n        var convertedValue = \"\";\r\n        if ((secondarySelection === this.state.selectionCriteria[0])) {\r\n            convertedValue = this.convertToHex(value, primarySelection);\r\n        }\r\n        else if ((secondarySelection === this.state.selectionCriteria[1])) {\r\n            convertedValue = this.convertToDec(value, primarySelection);\r\n        }\r\n        else if ((secondarySelection === this.state.selectionCriteria[2])) {\r\n            convertedValue = this.convertToBin(value, primarySelection);\r\n        }\r\n        this.setState({outputText:convertedValue})\r\n    }\r\n\r\n    convertToHex (value, primarySelection) {\r\n        let convertedValue = \"\";\r\n        if ((primarySelection === this.state.selectionCriteria[0])) {\r\n            convertedValue = value;\r\n        }\r\n        else if ((primarySelection === this.state.selectionCriteria[1])) {\r\n            convertedValue = parseInt(value, 10).toString(16);\r\n        }\r\n        else if ((primarySelection === this.state.selectionCriteria[2])) {\r\n            convertedValue = parseInt(value, 2).toString(16);\r\n        }\r\n        return convertedValue;\r\n    }\r\n\r\n    convertToDec (value, primarySelection) {\r\n        let convertedValue = \"\";\r\n        if ((primarySelection === this.state.selectionCriteria[0])) {\r\n            convertedValue = parseInt(value, 16).toString(10);\r\n        }\r\n        else if ((primarySelection === this.state.selectionCriteria[1])) {\r\n            convertedValue = value;\r\n        }\r\n        else if ((primarySelection === this.state.selectionCriteria[2])) {\r\n            convertedValue = parseInt(value, 2).toString(10);\r\n        }\r\n        return convertedValue;\r\n    }\r\n\r\n    convertToBin (value, primarySelection) {\r\n        let convertedValue = \"\";\r\n        if ((primarySelection === this.state.selectionCriteria[0])) {\r\n            convertedValue = parseInt(value, 16).toString(2);\r\n        }\r\n        else if ((primarySelection === this.state.selectionCriteria[1])) {\r\n            convertedValue = parseInt(value, 10).toString(2);\r\n        }\r\n        else if ((primarySelection === this.state.selectionCriteria[2])) {\r\n            convertedValue = value;\r\n        }\r\n        return convertedValue;\r\n    }\r\n\r\n    onSubmit () {\r\n        // hex dec bin\r\n        let primarySelection = this.state.primarySelection;\r\n        let secondarySelection = this.state.secondarySelection;\r\n        var value = this.state.entryText;\r\n\r\n        this.convert(value, primarySelection, secondarySelection)\r\n        this.focusInputText();\r\n    }\r\n\r\n    onSwapButton () {\r\n        this.swapState();\r\n        this.focusInputText();\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"app-wrapper\">\r\n                <div id=\"controls-text\">\r\n                    <p>\r\n                        Controls:\r\n                    </p>\r\n                    <ul><li>i: focus on the text box</li><li>k: cycle through primary selection</li><li>l: cycle through secondary selection</li><li>\r\n                        enter: perform the calculation</li><li>r: reset\r\n                    </li></ul>\r\n                </div>\r\n                <EntryText onInputFocus={this.onInputFocus} onInputBlur={this.onInputBlur} onEntryTextChange={this.onEntryTextChange} entryText={this.state.entryText} entryTextRef={this.entryTextRef}/>\r\n                <PrimarySelection selectionCriteria={this.state.selectionCriteria} primarySelection={this.state.primarySelection} onSelectionChange={this.onSelectionChange}/>\r\n                <SwapButton onSwapButton={this.onSwapButton}/>\r\n                <SecondarySelection  selectionCriteria={this.state.selectionCriteria} secondarySelection={this.state.secondarySelection} onSelectionChange={this.onSelectionChange}/>\r\n                <SubmitButton onSubmit={this.onSubmit} />\r\n                <OutputText outputText={this.state.outputText} />\r\n                <p>\r\n                Work in progress, issues to be sorted:\r\n                </p>\r\n                <ul>\r\n                <li>Validation of the input based on the selection</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default HexToDecApp;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport HexToDecApp from './containers/HexToDecApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <h1>Convert IT!</h1>\n        </header>\n        <main>\n            <HexToDecApp />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}